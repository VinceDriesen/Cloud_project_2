package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

import (
	db "agendaAPIService/database"
	"agendaAPIService/graph/model"
	"context"
	"log"
	"strconv"
)

// CreateAgenda is de resolver voor de createAgenda field.
func (r *mutationResolver) CreateAgenda(ctx context.Context, input model.CreateAgenda) (*model.Agenda, error) {
	agenda, err := db.CreateAgenda(input.Owner, input.Role)
	if err != nil {
		return nil, err
	}
	return agenda, nil
}

// DeleteAgenda is the resolver for the deleteAgenda field.
func (r *mutationResolver) DeleteAgenda(ctx context.Context, id string) (bool, error) {
	err := db.DeleteAgenda(id)
	if err != nil {
		return false, err
	}
	return true, nil
}

// UpdateAgenda is the resolver for the updateAgenda field.
func (r *mutationResolver) UpdateAgenda(ctx context.Context, id string, owner *int, role *model.Role) (*model.Agenda, error) {
	agenda, err := db.UpdateAgenda(id, owner, role)
	if err != nil {
		return nil, err
	}
	return agenda, nil
}

// CreateAgendaItem is the resolver for the createAgendaItem field.
func (r *mutationResolver) CreateAgendaItem(ctx context.Context, agendaID string, input model.CreateAgendaItem) (*model.AgendaItem, error) {
	agenda, err := db.CreateAgendaItem(agendaID, input)
	if err != nil {
		return nil, err
	}
	return agenda, nil
}

// UpdateAgendaItem is the resolver for the updateAgendaItem field.
func (r *mutationResolver) UpdateAgendaItem(ctx context.Context, id string, input model.UpdateAgendaItem) (*model.AgendaItem, error) {
	log.Printf("Agenda item updating: ID: %s, Title: %s, DateID: %d-%d, Input: %v", id, *input.Title, input.Date.Day, input.Date.Month, input)
	agenda, err := db.UpdateAgendaItem(id, input)
	if err != nil {
		log.Printf("Error updating agenda item: %v", err)
		return nil, err
	}
	log.Printf("Agenda item updated: ID: %s, Title: %s, DateID: %s, Input: %v", agenda.ID, agenda.Title, agenda.Date.ID, input)
	return agenda, nil
}

// DeleteAgendaItem is the resolver for the deleteAgendaItem field.
func (r *mutationResolver) DeleteAgendaItem(ctx context.Context, id string) (bool, error) {
	err := db.DeleteAgendaItem(id)
	if err != nil {
		return false, err
	}
	return true, nil
}

// CreateAppointment is the resolver for the createAppointment field.
func (r *mutationResolver) CreateAppointment(ctx context.Context, input model.CreateAppointment) (*model.Appointment, error) {
	appointment, err := db.CreateAppointment(input)
	if err != nil {
		return nil, err
	}
	return appointment, nil
}

// DeleteAppointment is the resolver for the deleteAppointment field.
func (r *mutationResolver) DeleteAppointment(ctx context.Context, id string) (bool, error) {
	err := db.DeleteAppointment(id)
	if err != nil {
		return false, err
	}
	return true, nil
}

// UpdateAppointment is the resolver for the updateAppointment field.
func (r *mutationResolver) UpdateAppointment(ctx context.Context, id string, agendaItemID *string, patient *int, doctor *int, recurring *model.RecurrenceFrequency) (*model.Appointment, error) {
	appointment, err := db.UpdateAppointment(id, agendaItemID, patient, doctor, recurring)
	if err != nil {
		return nil, err
	}
	return appointment, nil
}

// Agendas is de resolver voor de agendas field.
func (r *queryResolver) Agendas(ctx context.Context) ([]*model.Agenda, error) {
	agendas, err := db.GetAgendas()
	if err != nil {
		return nil, err
	}
	return agendas, nil
}

// Agenda is the resolver for the agenda field.
func (r *queryResolver) Agenda(ctx context.Context, id string) (*model.Agenda, error) {
	agenda, err := db.GetAgenda(id)
	if err != nil {
		return nil, err
	}
	return agenda, nil
}

// AgendaItems is the resolver for the agendaItems field.
func (r *queryResolver) AgendaItems(ctx context.Context, agendaID string) ([]*model.AgendaItem, error) {
	agendaItems, err := db.GetAgendaItems(agendaID)
	if err != nil {
		return nil, err
	}
	return agendaItems, nil
}

// AgendaItem is the resolver for the agendaItem field.
func (r *queryResolver) AgendaItem(ctx context.Context, id string) (*model.AgendaItem, error) {
	agendaItem, err := db.GetAgendaItem(id)
	if err != nil {
		return nil, err
	}
	return agendaItem, nil
}

// Appointments is the resolver for the appointments field.
func (r *queryResolver) Appointments(ctx context.Context) ([]*model.Appointment, error) {
	appointment, err := db.GetAppointments()
	if err != nil {
		return nil, err
	}
	return appointment, nil
}

// Appointment is the resolver for the appointment field.
func (r *queryResolver) Appointment(ctx context.Context, id string) (*model.Appointment, error) {
	appointmentID, err := strconv.Atoi(id)
	if err != nil {
		return nil, err
	}
	appointment, err := db.GetAppointment(appointmentID)
	if err != nil {
		return nil, err
	}
	return appointment, nil
}

// AppointmentsFromAgenda is the resolver for the appointmentsFromAgenda field.
func (r *queryResolver) AppointmentsFromAgenda(ctx context.Context, agendaID string) ([]*model.Appointment, error) {
	appointments, err := db.GetAppointmentsFromAgenda(agendaID)
	if err != nil {
		return nil, err
	}
	return appointments, nil
}

// AgendaOwner is the resolver for the agendaOwner field.
func (r *queryResolver) AgendaOwner(ctx context.Context, ownerID int) (*model.Agenda, error) {
	agenda, err := db.GetAgendaFromOwner(ownerID)
	if err != nil {
		return nil, err
	}
	return agenda, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
