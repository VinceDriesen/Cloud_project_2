// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Agenda struct {
	ID          string        `json:"id"`
	Owner       int           `json:"owner"`
	Role        Role          `json:"role"`
	AgendaItems []*AgendaItem `json:"agendaItems"`
	SharedWith  []int         `json:"sharedWith"`
}

type AgendaItem struct {
	ID           string    `json:"id"`
	Title        string    `json:"title"`
	Description  *string   `json:"description,omitempty"`
	Duration     int       `json:"duration"`
	Date         *Date     `json:"date"`
	Participants []*Agenda `json:"participants"`
}

type Appointment struct {
	ID         string              `json:"id"`
	AgendaItem *AgendaItem         `json:"agendaItem"`
	Patient    *int                `json:"patient,omitempty"`
	Doctor     int                 `json:"doctor"`
	Recurring  RecurrenceFrequency `json:"recurring"`
}

type CreateAgenda struct {
	Owner int  `json:"owner"`
	Role  Role `json:"role"`
}

type CreateAgendaItem struct {
	Title        string     `json:"title"`
	Description  *string    `json:"description,omitempty"`
	Duration     int        `json:"duration"`
	Date         *DateInput `json:"date"`
	Participants []string   `json:"participants"`
}

type CreateAppointment struct {
	AgendaItemID string              `json:"agendaItemId"`
	Doctor       int                 `json:"doctor"`
	Recurring    RecurrenceFrequency `json:"recurring"`
}

type Date struct {
	ID     string `json:"id"`
	Day    int    `json:"day"`
	Month  int    `json:"month"`
	Year   int    `json:"year"`
	Hour   int    `json:"hour"`
	Minute int    `json:"minute"`
}

type DateInput struct {
	Day    int `json:"day"`
	Month  int `json:"month"`
	Year   int `json:"year"`
	Hour   int `json:"hour"`
	Minute int `json:"minute"`
}

type Mutation struct {
}

type Query struct {
}

type UpdateAgendaItem struct {
	Title        *string    `json:"title,omitempty"`
	Description  *string    `json:"description,omitempty"`
	Duration     *int       `json:"duration,omitempty"`
	Date         *DateInput `json:"date,omitempty"`
	Participants []string   `json:"participants,omitempty"`
}

type RecurrenceFrequency string

const (
	RecurrenceFrequencyDaily   RecurrenceFrequency = "DAILY"
	RecurrenceFrequencyWeekly  RecurrenceFrequency = "WEEKLY"
	RecurrenceFrequencyMonthly RecurrenceFrequency = "MONTHLY"
	RecurrenceFrequencyYearly  RecurrenceFrequency = "YEARLY"
	RecurrenceFrequencyNone    RecurrenceFrequency = "NONE"
)

var AllRecurrenceFrequency = []RecurrenceFrequency{
	RecurrenceFrequencyDaily,
	RecurrenceFrequencyWeekly,
	RecurrenceFrequencyMonthly,
	RecurrenceFrequencyYearly,
	RecurrenceFrequencyNone,
}

func (e RecurrenceFrequency) IsValid() bool {
	switch e {
	case RecurrenceFrequencyDaily, RecurrenceFrequencyWeekly, RecurrenceFrequencyMonthly, RecurrenceFrequencyYearly, RecurrenceFrequencyNone:
		return true
	}
	return false
}

func (e RecurrenceFrequency) String() string {
	return string(e)
}

func (e *RecurrenceFrequency) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RecurrenceFrequency(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RecurrenceFrequency", str)
	}
	return nil
}

func (e RecurrenceFrequency) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Role string

const (
	RoleDoctor  Role = "DOCTOR"
	RolePatient Role = "PATIENT"
)

var AllRole = []Role{
	RoleDoctor,
	RolePatient,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleDoctor, RolePatient:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
